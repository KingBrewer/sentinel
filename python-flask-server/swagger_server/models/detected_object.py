# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DetectedObject(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, probability: float=None):  # noqa: E501
        """DetectedObject - a model defined in Swagger

        :param _class: The _class of this DetectedObject.  # noqa: E501
        :type _class: str
        :param probability: The probability of this DetectedObject.  # noqa: E501
        :type probability: float
        """
        self.swagger_types = {
            '_class': str,
            'probability': float
        }

        self.attribute_map = {
            '_class': 'class',
            'probability': 'probability'
        }

        self.__class = _class
        self._probability = probability

    @classmethod
    def from_dict(cls, dikt) -> 'DetectedObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DetectedObject of this DetectedObject.  # noqa: E501
        :rtype: DetectedObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> str:
        """Gets the _class of this DetectedObject.


        :return: The _class of this DetectedObject.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this DetectedObject.


        :param _class: The _class of this DetectedObject.
        :type _class: str
        """
        allowed_values = ["person"]  # noqa: E501
        if _class not in allowed_values:
            raise ValueError(
                "Invalid value for `_class` ({0}), must be one of {1}"
                .format(_class, allowed_values)
            )

        self.__class = _class

    @property
    def probability(self) -> float:
        """Gets the probability of this DetectedObject.

        probability of classification (between 0.0 and 1.0)  # noqa: E501

        :return: The probability of this DetectedObject.
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability: float):
        """Sets the probability of this DetectedObject.

        probability of classification (between 0.0 and 1.0)  # noqa: E501

        :param probability: The probability of this DetectedObject.
        :type probability: float
        """
        if probability is not None and probability > 1:  # noqa: E501
            raise ValueError("Invalid value for `probability`, must be a value less than or equal to `1`")  # noqa: E501
        if probability is not None and probability < 0:  # noqa: E501
            raise ValueError("Invalid value for `probability`, must be a value greater than or equal to `0`")  # noqa: E501

        self._probability = probability
